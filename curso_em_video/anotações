************* CURSO EM VIDEO ***************


--------- condicoes -------
- if condição.condição():  -> primeira opção.
- else:                    -> segunda condição.
- elif condição.condição(): -> segunda opção (se não).

ps: em caso de duvidas veja na aula_CEV_10.py.


---------------bibliotecas--------------------
* random -> gerador de aleatórios.
* pygame -> utilizados para criar jogos, como jogos tem musicas utilizaremos ele.
* date -> verificação de validades, tbm utiliza o ano atual.
* itemgetter -> ordenar os dicionarios

----------------funções aleatorias-----------------------
- random.randint(intervalo dos numeros) -> gera numeros aleatórios.
- random.choice(lista) -> faz uma escolha aleatória entre um dado intervalo, seja ele, nomes, numeros, etc...
-random.shuffle(lista) -> recebe uma lista, embaralha essa lista, entrega uma lista embaralhada.

---------------funcoes para adicionar audio-----------------
-pygame.init() -> iniciar a biblioteca pygame.
-pygame.mixer.music.load('nome do arq MP3') -> carregar o mixer que deseja .
-pygame.mixer.music.play() -> tocas a musica.
pygame.event.wait -> espera a musica terminar de tocar.

--------------funcoes para listas------------------------------
- list(range(4,25,2)) -- cria uma lista aleatoria ordenada, seguindo os requisitos dos parantes, sendo eles(inicio, final, (por escolha) condicao que pula de 'tanto em tanto' - numero que deseja) -> ex(4(inicio), 25(fim), 2(pulando 2 casas a cada insercao)).
- nome_lista.append(o que deseja adicionar) -- adicina algo no final da lista.
- nome_lista.insert(posicao, o que deseja aficionar) --adiciona algo na posicao designada.
- del nome_lista[posicao] -- elimina o elemento da posicao desejada.
- nome_lista.pop() -- geralmente utilizado para remover o ultimo elemento, mas pode ser usado de outro modo: nome_lista.pop(posicao) assim ele elimina o elemento da posicao demarca.
- nome_lista.remove('elemento que deseja remover') -- remove pela conteudo do elemento
**ps: havera erro caso deseje remover um elemento que nao existe na lista, use o 'if in' para verificacao quando nao houver certeza de que o elemento realmente exista na lista.
- nome_lista.sort() -- ordena os valores dentro da lista.
- nome_lista.sort(reverse=True) -- ordena os valores inversamente dentro da lista.
- len(nome_lista) -- define o tamanho da lista.
 ***listas compostas: lista dentro de lista, ex:
 pessoa = [['pedro', 26]['maria', 16]['carlos', 32]
 print(pessoa[0][0]) -> pedro
 print(pessoa[1][1]) -> 16
 print(pessoa[2][0]) -> carlos
 print(pessoa[1]) -> 'maria', 16 

------------- dicionarios ----------------------
modo de declaracao: dic = {}
dic.values() -> retornar os valores que foram adicionados dentro do dicionario
dic.keys() -> retorna as chaves usadas dentro do dicionarios, ex: dic = {'nome' : 'pedro'} -> nome é a chave e pedro é o valor
dic.items() -> retorna TODOS os dados do dicionario, tanto quanto chaves e valores
dic.copy() -> copia o conteudo de uma lista

--------------- funcoes -----------------
todas as passagens de parametro em python e por referencia
empacotamento-> def contador(*num), ex: aula 20
~~variaveis~~
dentro da funcao: variavel local
fora da funcao (no programa principal): variavel global
ps::: caso exista uma variavel local com o mesmo nome da variavel global, havera duas variais com o mesmo nome e valores distintos **aula21**

------------- modularizacao ---------
focos:  dividir um programa grande
        aumentar a legibilidade
        facilitar a manutencao

vantagem: organizacao
          facilidade na manutencao
          ocultacao de codigos detalhado
          reutilizacao em outros projetos


------------- pacotes -------------
dentro do pacote voce pode fazer uma separacao de funcoes usadas na modularizacao 
pode-se criar pacote dentro de pacote
->em duvidas, assista a aula 22

 #### cadeias de caracter ####
¨¨exemplos em aula_CEV_09¨¨
- len(frase) -> comprimento.
- frase.count('o')-> conta quantas vezes tem a - letra determinada pelo () na frase.
- frase.find('o que deseja encontrar') -> busca e mostra onde apareceu o primeiro caracter na frase.
- in #ex: 'curso' in frase -> busca, procura a string desejada dentro de uma string //aparece apenas true/false.
- frase.replace('o que proccura','substituira a procura') -> usado para substituir.
- frase.upper() -> transforma tudo em maiusculo.
- frase.lower() -> transforma tudo em minusulo.
- frase.capitalize() -> transforma tudo em minusco e depois substitui a primeira letra em maiusculo.
- frase.title() analisa as palavras da string e transfoma as iniciais em maiusculo e o restante em minusculo.
- frase.strip() -> remove os espços inuteis, ou seja, os do inicio e os do final.
- frase.rstrip() -> remove os espaços inuteis apenas do lado direito.
- frase.lstrip -> remove os espaços inuteis apenas do lado esquerdo.
- frase.split() -> onde tem espaço ele divide a string, gerando assim uma nova lista a cada divisão.
- 'tipo de separador (ex: "-")'.join -> junta todos os elementos de frase e em suas respectivas separações utiliza o "-".

***************observações*******************
no python voce pode fatiar string...
|C|u|r|s|o| |e|m| |V| i| d|e |o| |P|y |t |h|o|n|
 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...

ex1: frase[9] -> ele pegará o "V" que é correspondente a casa 9.
ex2: frase[9:13] -> ele pegará do "v ao E" pois o ultimo numero não entra na contagem.
ex3: frase[9:21:2] // [9::3](ex4/inverso)-> le vai pegar os caracter 9 ao 20 e puladr de 2 em 2 "VdoPto".
ex4: frase[:5] // [5:] (inverso)-> do inicio até a o 5, ou seja, "Curso".
ex5:frase.count('o',0,13) -> conta as letras 'o' no intervalo entre 0 e 13.

* obs [] -> lista.
* obs :  -> representa o intervalo que deseja.
* obs a lingagem python reconhece a diferença entre maiusculo e minusculo.


ajuda interativa, HELP ()

----------------ANSI -> cores no terminal--------------
\033["codigo na cor"m

"estilo, texto, back"
*** para estilo ***
0 = nada
1 = negrito
4 = sublinhado
7 = negativo
*** texto ***
30 = branco, 31 = vermelho 32 = verde
33 = amarelo, 34 = azul, 35 = roxo
36 = azul bb, 37 = cinza
***back/cores de fundo**
40 ao 47, usando a mesma sequencia de cores do modo texto

exemplo: \033[0;33;44m 
